// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AvSearch.Features.API
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NameParser")]
    public partial class NameParserFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "NameParser.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/API", "NameParser", "This API will take strings and place them into the Individual or Entity depending" +
                    " on the way it\'s written", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parse names into Individual or Entity")]
        [NUnit.Framework.TestCaseAttribute("1", "Donald Duck", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Mr. Donald Duck", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Donald Duck III", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Mr. Edward Horseface III", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Donald Duck, Inc", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Donald Duck, LLC", null)]
        [NUnit.Framework.TestCaseAttribute("3", "Donald Duck, Daffy Duck, Duck & Sons, Inc.", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Donald Duck and Daffy Duck", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Donald and Daffy Duck", null)]
        [NUnit.Framework.TestCaseAttribute("1", "The Donald Duck Trust", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Duck & Duck & Duck, LLC", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Donald Duck, esq", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Mr. Donald Duck, MD", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Mr Edward Horseface III", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Jim and Jane Doe", null)]
        [NUnit.Framework.TestCaseAttribute("3", "John and Jill Black, A married couple", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Google", null)]
        [NUnit.Framework.TestCaseAttribute("1", "The Best Bank Ever", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Rooster, Inc", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Mr Santa T Claus, III and Miss Snow S Claus, Esq", null)]
        [NUnit.Framework.TestCaseAttribute("6", "Thomas Wayne, M.D., Lee Yeon Suk, Ana Lorena López Ramírez, Wen Jiabao xiān sheng" +
            ", Mr. Oswald Cobblepot, Maria Andujo Melandez de Lopez", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Charles Pennington III", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Miss Mary Jones", null)]
        [NUnit.Framework.TestCaseAttribute("3", "Mr James T Jones and Miss Mary S Jones, Esq, This Is My Another Dream Company", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Miss Mary S Jones, Esq", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Mary S Jones, Esq", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Mary Jones, Esq", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Mary Jones, AbaraCadabra", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Mary Jones and Tom Jones", null)]
        [NUnit.Framework.TestCaseAttribute("3", "Mary Jones, Tom and Smith Jones", null)]
        [NUnit.Framework.TestCaseAttribute("3", "Mary Jones, Tom Jones, Frank Sinatra", null)]
        [NUnit.Framework.TestCaseAttribute("2", "John and Jay Doe", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Mickey Mouse, Disney & Orlando and Mini", null)]
        [NUnit.Framework.TestCaseAttribute("2", "Foo And Bar, Donkey & Tiger and Mini", null)]
        [NUnit.Framework.TestCaseAttribute("1", "CareHere, LLC", null)]
        [NUnit.Framework.TestCaseAttribute("1", "Morgan & Morgan, INC", null)]
        [NUnit.Framework.TestCaseAttribute("4", "Mary Jones, Morgan & Morgan, INC, John and Jay Daoe", null)]
        [NUnit.Framework.TestCaseAttribute("18", @"Mary Jones, John And James and Jane Daoe AND Sam A Smith, Shawn Daley & Mika Bayramov And Joey Yip Man, Morgan & Morgan, INC, John and Jay Abc, CareHere, LLC, Mr Smith Trust, Chase Mortgage Bank, Hampton Springs HOA, Mr Cooper, Lender Company, This My Dream Business, Inc", null)]
        [NUnit.Framework.TestCaseAttribute("4", "Jr. Bonnie Gracia, Miss James Gracia, Jr Bonnie Gracia, Md James Gracia", null)]
        public virtual void ParseNamesIntoIndividualOrEntity(string amount, string names, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("names", names);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse names into Individual or Entity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("I get access token for Account Verification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("I pass in array of {0}", names), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then(string.Format("I expect the names to be separeted into Individual or Entity and has expected {0}" +
                            " of objects", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
